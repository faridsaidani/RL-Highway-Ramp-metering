analyze.py:

This script analyzes the rewards from a CSV file. It calculates moving averages, groups rewards by PID and episode, and plots the results.
control_traffic.py:

This script runs a trained Q-learning agent to control traffic in the SUMO environment. It initializes the environment, loads the trained agent, and executes the control loop.
dqn_agent.py:

This script defines the DQNAgent class, which implements a Deep Q-Network (DQN) agent for reinforcement learning. It includes methods for training, updating, selecting actions, saving, and loading the agent.
dqn_control.py:

This script runs a trained DQN agent for traffic control in the SUMO environment. It initializes the environment, loads the trained DQN model, and executes the control loop.
dqn_train.py:

This script trains or continues training a DQN agent for ramp metering. It initializes the environment, trains the agent, saves the trained model, and plots the training results.
envWrapper.py:

This script defines the RampMeterEnv class, which simulates a ramp metering environment using the SUMO traffic simulation software. It includes methods for resetting the environment, stepping through the environment, and calculating rewards.
evaluate_models.py:

This script evaluates multiple DQN models for traffic control in the SUMO environment. It runs each model for a specified number of episodes and saves the average rewards to a CSV file.
evaluate_q_learning_models.py:

This script evaluates multiple Q-learning models for traffic control in the SUMO environment. It runs each model for a specified number of episodes and saves the average rewards to a CSV file.
highway_env.py:

This script defines the HighwayEnvironment class, which simulates a highway environment with a ramp using the SUMO traffic simulation software. It includes methods for generating the network, route files, configuration files, and controlling the simulation.
q_learning.py:

This script defines the QLearningAgent class, which implements a Q-learning agent for reinforcement learning. It includes methods for training, updating, selecting actions, saving, and loading the agent.
ramp_meter_env.py:

This script defines the RampMeterEnv class, which simulates a ramp metering environment using the SUMO traffic simulation software. It includes methods for resetting the environment, stepping through the environment, and calculating rewards.
test_ramp_meter_env.py:

This script tests the RampMeterEnv environment with TraCI. It initializes the environment, runs a test loop for a specified number of steps, and prints the results.
train.py:

This script trains or continues training a Q-learning agent for ramp metering. It initializes the environment, trains the agent, saves the trained model, and plots the training results.
